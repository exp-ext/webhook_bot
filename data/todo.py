import difflib
import re
from datetime import date as dt
from datetime import datetime, timedelta

from settings import bot
from data.model import make_request


def similarity(s1: str, s2: str) -> float:
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ –º–æ–¥—É–ª–µ difflib
       [https://docs.python.org/3/library/difflib.html]."""
    normalized1 = s1.lower()
    normalized2 = s2.lower()
    matcher = difflib.SequenceMatcher(None, normalized1, normalized2)
    return matcher.ratio()


class Messege:
    """–°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    __slots__ = ('date', 'message', 'time', 'type_note')

    def __init__(self,
                 date: str,
                 message: str,
                 time: str,
                 type_note: str,
                 ) -> None:
        self.date = date
        self.message = message
        self.time = time
        self.type_note = type_note

    def add_todo(self, user_id: int) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ë–î."""
        tasks = make_request(
            """ SELECT id, date, time, task
                FROM tasks
                WHERE date=%s;
            """,
            (self.date,),
            fetch='all'
        )
        if len(tasks) > 0:
            for item in tasks:
                simil = similarity(item[3], self.message)
                if simil > 0.618:
                    return False

        new_tasks = (
            self.date, self.time, self.type_note, self.message, user_id
        )

        make_request(
            """INSERT INTO tasks (date, time, type, task, user_id)
               VALUES(%s, %s, %s, %s, %s);
            """,
            new_tasks
        )
        return True


def getter_data_for_parsing_messege(message) -> list[str]:
    """–°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –∫–ª–∞—Å—Å–∞."""
    type_note = 'todo'

    if re.search(r'\d+[./-]\d+[./-]\d+', message):
        date_found = re.search(
            r'\d+[./-]\d+[./-]\d+',
            message
        ).group()
        date_found = re.sub(r'[/-]', '.', date_found)

        if len(date_found.split(".")[2]) == 2:
            year = f'20{date_found.split(".")[2]}'
        else:
            year = date_found.split(".")[2]

        date = datetime(
            int(year),
            int(date_found.split(".")[1]),
            int(date_found.split(".")[0])
        )
        date_str = datetime.strftime(date, '%d.%m.%Y')

    elif re.search(r'\d+[./-]\d+', message):
        date_found = re.search(r'\d+[./-]\d+', message).group()
        date = datetime(
            2000,
            int(date_found.split(".")[1]),
            int(date_found.split(".")[0])
        )
        date_str = datetime.strftime(date, '%d.%m')
        type_note = 'birthday'

    elif re.search(r'[–°—Å]–µ–≥–æ–¥–Ω—è|[–ó–∑]–∞–≤—Ç—Ä–∞', message):
        date_found = re.search(r'[–°—Å]–µ–≥–æ–¥–Ω—è|[–ó–∑]–∞–≤—Ç—Ä–∞', message).group()
        today = datetime.strftime(dt.today(), '%d.%m.%Y')
        tomorrow = datetime.strftime(
            dt.today() + timedelta(days=1),
            '%d.%m.%Y'
            )
        near_future = {
            '—Å–µ–≥–æ–¥–Ω—è': today,
            '–∑–∞–≤—Ç—Ä–∞': tomorrow,
            }
        date_str = near_future[date_found.lower()]
    else:
        date_found = ''
        date_str = None

    if re.search(r'\d+[:]\d{2}', message):
        time_found = re.search(r'\d+[:]\d{2}', message).group()
        time = datetime(
            2000,
            1,
            1,
            int(time_found.split(":")[0]),
            int(time_found.split(":")[1])
        )
        time_str = datetime.strftime(time, '%H:%M')
    else:
        time_str = '07:15'

    message_without_date = re.sub(date_found, '', message)
    message_without_date = re.sub(
        r'\s+',
        ' ',
        message_without_date
    ).strip()

    return [date_str, message_without_date, time_str, type_note]


def add_notes(message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ë–î."""
    try:
        data = getter_data_for_parsing_messege(message.text)
        pars_mess = Messege(*data)
        date = pars_mess.date
        t_time = pars_mess.time
        type_note = pars_mess.type_note
        task = pars_mess.message
        user_id = message.from_user.id

        if date is None:
            text_send = (
                f'–î–∞—Ç–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ *<{message.text}>* '
                '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ'
            )
            bot.send_message(
                message.chat.id,
                text_send,
                parse_mode='Markdown'
            )
        elif pars_mess.add_todo(user_id) is False:
            text_send = (
                '–ï—Å—Ç—å –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 61% —Å—Ö–æ–∂–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –¥–∞—Ç—É'
                f' *{date}*,\n—Å–æ–æ–±—â–µ–Ω–∏–µ *<{task}>* –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ'
            )
            bot.send_message(
                message.chat.id,
                text_send,
                parse_mode='Markdown'
            )
        else:
            if type_note == 'todo':
                text_send = (
                    f'{message.from_user.first_name}, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, *<{task}>* '
                    f'–¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ –¥–∞—Ç—É <{date}> –Ω–∞ –≤—Ä–µ–º—è <{t_time}>'
                )
                bot.send_message(
                    message.chat.id,
                    text_send, parse_mode='Markdown'
                    )
            elif type_note == 'birthday':
                text_send = (
                    f'{message.from_user.first_name}, –µ–∂–µ–≥–æ–¥–Ω–æ–µ '
                    f'–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ *<{task}>* –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ –¥–∞—Ç—É <{date}>'
                )
                bot.send_message(
                    message.chat.id,
                    text_send, parse_mode='Markdown'
                )
        question_id = make_request(
            """ SELECT chat_id, message_id
                FROM requests
                WHERE user_id=%s AND chat_id=%s;
            """,
            (user_id, str(message.chat.id)),
            fetch='one'
        )
        bot.delete_message(question_id[0], question_id[1])

        message_id = message.message_id
        bot.delete_message(message.chat.id, message_id)

    except Exception as exc:
        bot.send_message(message.chat.id, f'–æ—à–∏–±–æ—á–∫–∞ –≤—ã—à–ª–∞ - {exc}')


def del_note(message):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –ë–î."""
    try:
        data = getter_data_for_parsing_messege(message.text)
        pars_mess = Messege(*data)
        date = pars_mess.date
        task = pars_mess.message

        if date is None:
            send_text = (
                f'*{message.from_user.first_name}*, '
                '–¥–∞—Ç–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ù–∞—á–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.'
            )
            bot.send_message(
                message.chat.id,
                send_text, parse_mode='Markdown'
            )
        else:
            tasks = make_request(
                """ SELECT id, task
                    FROM tasks
                    WHERE date=%s AND task LIKE %s;
                """,
                (date, '%' + task + '%'),
                fetch='one'
            )
            if tasks is None:
                send_text = (
                    f'{message.from_user.first_name}, '
                    f'–Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫ —Å —Ç–µ–∫—Å—Ç–æ–º *<{task}>* –Ω–∞ —ç—Ç—É –¥–∞—Ç—É!'
                )
                bot.send_message(
                    message.chat.id,
                    send_text, parse_mode='Markdown'
                )
            else:
                make_request(
                    """DELETE FROM tasks WHERE id=%s;""",
                    (tasks[0],)
                )
                send_text = (
                    f"{message.from_user.first_name}, "
                    f"–∑–∞–ø–∏—Å—å *<{tasks[1]}>* –Ω–∞ –¥–∞—Ç—É {date} —É–¥–∞–ª–µ–Ω–∞"
                )
                bot.send_message(
                    message.chat.id,
                    send_text,
                    parse_mode='Markdown'
                )

        question_id = make_request(
            """ SELECT chat_id, message_id
                FROM requests
                WHERE user_id=%s AND chat_id=%s;
            """,
            (message.from_user.id, str(message.chat.id)),
            fetch='one'
        )
        bot.delete_message(question_id[0], question_id[1])

        message_id = message.message_id
        bot.delete_message(message.chat.id, int(message_id))

    except Exception as exc:
        bot.send_message(message.chat.id, f'–æ—à–∏–±–∫–∞ - {exc}')
        pass


def show_note_on_date(message):
    """–í—ã–≤–æ–¥ –∑–∞–ø–∏—Å–µ–π –∏–∑ –ë–î –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É."""
    data = getter_data_for_parsing_messege(message.text)
    date = data[0]
    date_every_year = '.'.join([date.split('.')[0], date.split('.')[1]])

    if date is None:
        send_text = (
            f'*{message.from_user.first_name}*, '
            '–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å —á—Ç–æ —ç—Ç–æ –∑–∞ –¥–∞—Ç–∞ üßê. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ üôÑ'
        )
        bot.send_message(
            message.chat.id,
            send_text,
            parse_mode='Markdown'
        )
    else:
        tasks = make_request(
            """ SELECT date, type, task
                FROM tasks
                WHERE date=%s or date=%s;
            """,
            (date_every_year, date),
            fetch='all'
        )
        text_notes = (
            f'*{message.from_user.first_name}, '
            f'–Ω–∞ {date} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ üìú:*\n'
        )
        send_note = False
        text_birthday = (
            f'*{message.from_user.first_name}, '
            f'–Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É {date} –Ω–∞–π–¥–µ–Ω–æ –µ–∂–µ–≥–æ–¥–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ üéâ:*\n'
        )
        send_birthday = False

        for item in tasks:
            if item[1] == 'todo':
                text_notes += f'- {item[2]}\n'
                send_note = True
            if item[1] == 'birthday':
                text_birthday += f'- {item[2]}\n'
                send_birthday = True

        if send_note:
            bot.send_message(
                message.chat.id,
                text_notes,
                parse_mode='Markdown'
            )
        if send_note and send_birthday:
            bot.send_message(
                message.chat.id,
                '–∏ –µ—à—ë,',
                parse_mode='Markdown'
            )
        if send_birthday:
            bot.send_message(
                message.chat.id,
                text_birthday,
                parse_mode='Markdown'
            )
    question_id = make_request(
            """ SELECT chat_id, message_id
                FROM requests
                WHERE user_id=%s AND chat_id=%s;
            """,
            (message.from_user.id, str(message.chat.id)),
            fetch='one'
        )
    bot.delete_message(question_id[0], question_id[1])

    message_id = message.message_id
    bot.delete_message(message.chat.id, int(message_id))


def sort_date(x: int) -> int:
    """–ö–ª—é—á —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏."""
    d = x.split(" - ")[0]
    sort_val = f'{d.split(".")[2]}{d.split(".")[1]}{d.split(".")[1]}'
    return int(sort_val)


def show_all_notes(message):
    """–í—ã–≤–æ–¥ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –ë–î."""
    note = []
    tasks = make_request(
        """ SELECT date, task
            FROM tasks
            WHERE type='todo' AND task NOT LIKE ('%' || '—Å –∞–ø–æ–≥–µ–µ–º' || '%');
        """,
        fetch='all'
    )
    for item in tasks:
        note.append(f'{item[0]} - {item[1]}')

    note.sort(key=sort_date)
    if tasks:
        note_sort = (
            f'*{message.from_user.first_name}, '
            '–≤ –Ω–∞—à–∏—Ö –ø–ª–∞–Ω–∞—Ö –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏ üìú:*\n'
        )
    else:
        note_sort = (
            f'*{message.from_user.first_name}, '
            '—É –Ω–∞—Å –Ω–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –ø–ª–∞–Ω–æ–≤ üëå*\n'
        )
    for n in note:
        note_sort = note_sort + f'{n}\n'

    bot.send_message(message.chat.id, note_sort, parse_mode='Markdown')


def show_all_birthdays(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è."""
    note = []
    tasks = make_request(
        """ SELECT date, task
            FROM tasks
            WHERE type='birthday';
        """,
        fetch='all'
    )
    for item in tasks:
        note.append(f'{item[0]} - {item[1]}')

    note.sort(key=lambda x: int(f'{x[:5].split(".")[1]}{x[:5].split(".")[0]}'))
    if tasks:
        note_sort = (
            f'*{message.from_user.first_name}, '
            '–Ω–∞–π–¥–µ–Ω—ã –µ–∂–µ–≥–æ–¥–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üéâ:*\n'
        )
    else:
        note_sort = (
            f'*{message.from_user.first_name}, '
            '–ø–æ—Ö–æ–∂–µ —á—Ç–æ —É –≤–∞—Å –Ω–µ—Ç –µ–∂–µ–≥–æ–¥–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ü´§:*\n'
        )
    for n in note:
        note_sort = note_sort + f'{n}\n'

    bot.send_message(message.chat.id, note_sort, parse_mode='Markdown')
