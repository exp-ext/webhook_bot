import time

from telebot import types

from settings import bot
from data.geoservice import (current_weather, my_current_geoposition,
                             weather_forecast)
from data.parsing import show_joke, where_to_go
from data.model import make_request
from data.todo import (add_notes, del_note, show_all_birthdays, show_all_notes,
                       show_note_on_date)


def replace_messege_id(user_id: int, messege_id: int, chat_id: int) -> None:
    """–ó–∞–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π ID —Å–æ–æ–±—â–µ–Ω–∏—è user –≤ –ë–î."""
    iddate = round(time.time() * 100000)
    new_request = (iddate, user_id, chat_id, messege_id)

    make_request(
        'execute',
        """REPLACE INTO requests VALUES(?, ?, ?, ?);""",
        new_request
    )


def help(message):
    """–í—ã–≤–æ–¥–∏–º –∫–Ω–æ–ø–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –Ω–∞ —ç–∫—Ä–∞–Ω."""
    keyboard = types.InlineKeyboardMarkup(row_width=2)

    add_note = types.InlineKeyboardButton(
        text="üí¨ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å",
        callback_data='add'
    )
    del_note = types.InlineKeyboardButton(
        text="‚ùå —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å",
        callback_data='del'
    )
    get_all_birthdays = types.InlineKeyboardButton(
        "üöº –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Ä–æ–∂–¥–µ–Ω–∏–π",
        callback_data='birthdays'
    )
    get_note_on_date = types.InlineKeyboardButton(
        "üìÖ –ø–ª–∞–Ω—ã –Ω–∞ –¥–∞—Ç—É",
        callback_data='show'
    )
    get_all_note = types.InlineKeyboardButton(
        "üìù –≤—Å–µ –ø–ª–∞–Ω—ã",
        callback_data='show_all'
    )
    get_joke = types.InlineKeyboardButton(
        "üé≠ –∞–Ω–µ–∫–¥–æ—Ç",
        callback_data='joke'
    )
    where_to_go = types.InlineKeyboardButton(
        "üèÑ —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ –°–ü–±",
        callback_data='where_to_go'
    )

    keyboard.add(add_note, del_note, get_all_birthdays,
                 get_note_on_date, get_all_note, get_joke)
    keyboard.add(where_to_go)

    menu_text = (
        "* üí°  –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ  üí° *".center(28, "~")
        + "\n"
        + f"–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.first_name}".center(28, "~")
    )

    menu_id = bot.send_message(
        message.chat.id,
        menu_text,
        reply_markup=keyboard,
        parse_mode='Markdown'
    ).message_id

    replace_messege_id(message.from_user.id, menu_id, message.chat.id)

    message_id = message.message_id
    bot.delete_message(message.chat.id, message_id)

    add_new_user = (
        message.from_user.id,
        message.from_user.first_name,
        message.from_user.last_name
    )

    make_request(
        'execute',
        """REPLACE INTO users VALUES(?, ?, ?);""",
        add_new_user
    )


def location(message):
    """–ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é –ø–æ–≥–æ–¥—ã –≤ —Ç–æ–ª—å–∫–æ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º"""
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    weather_per_day = types.InlineKeyboardButton(
        text="üåà –ø–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å",
        callback_data='weather_per_day'
    )
    get_weather_for_4_day = types.InlineKeyboardButton(
        text="‚òîÔ∏è –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 4 –¥–Ω—è",
        callback_data='weather'
    )
    get_my_position = types.InlineKeyboardButton(
        text="üõ∞ –º–æ—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã",
        callback_data='my_position'
    )
    keyboard.add(weather_per_day, get_weather_for_4_day, get_my_position)

    menu_text = "* üí°  –ú–ï–ù–Æ –ü–û–ì–û–î–´  üí° *".center(28, "~")

    menu_id = bot.send_message(
        message.chat.id,
        menu_text,
        reply_markup=keyboard,
        parse_mode='Markdown'
    ).message_id

    chat_id = message.chat.id
    lat = message.location.latitude
    lon = message.location.longitude

    replace_messege_id(message.from_user.id, menu_id, chat_id)

    iddate = round(time.time() * 100000)
    geo = (iddate, message.from_user.id, lon, lat)

    make_request(
        'execute',
        """INSERT INTO geolocation VALUES(?, ?, ?, ?);""",
        geo
    )

    message_id = message.message_id
    bot.delete_message(message.chat.id, message_id)


def callback_inline(call):
    """–†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏."""
    message = call.message

    menu_id = make_request(
        'execute',
        """ SELECT MAX(dateid), chatid, messegeid
            FROM requests
            WHERE userid=? and chatid=?
        ;""",
        (call.from_user.id,  message.chat.id),
        fetch='all'
    )

    bot.delete_message(menu_id[0][1], menu_id[0][2])

    if call.data == 'birthdays':
        message.from_user.first_name = call.from_user.first_name
        show_all_birthdays(message)
    elif call.data == 'show_all':
        message.from_user.first_name = call.from_user.first_name
        show_all_notes(message)
    elif call.data == 'joke':
        show_joke(message)
    elif call.data == 'add':
        req_text = (
            f'*{call.from_user.first_name}*,'
            '–≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º'
        )
        msg = bot.send_message(
            message.chat.id,
            req_text,
            parse_mode='Markdown'
        )
        replace_messege_id(call.from_user.id, msg.message_id, message.chat.id)

        bot.register_next_step_handler(msg, add_notes)
    elif call.data == 'del':
        req_text = (
            f'*{call.from_user.first_name}*,'
            ' –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Ç–µ–∫—Å—Ç–∞ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –µ—ë —É–¥–∞–ª–µ–Ω–∏—è'
        )
        msg = bot.send_message(
            message.chat.id,
            req_text,
            parse_mode='Markdown'
        )
        replace_messege_id(call.from_user.id, msg.message_id, message.chat.id)

        bot.register_next_step_handler(msg, del_note)
    elif call.data == 'show':
        req_text = (
            f'*{call.from_user.first_name}*,'
            ' –≤–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫'
        )
        msg = bot.send_message(
            message.chat.id,
            req_text,
            parse_mode='Markdown'
            )
        replace_messege_id(call.from_user.id, msg.message_id, message.chat.id)
        bot.register_next_step_handler(msg, show_note_on_date)
    elif call.data == 'where_to_go':
        where_to_go(message)
    elif call.data == 'weather':
        message.from_user.id = call.from_user.id
        weather_forecast(message)
    elif call.data == 'weather_per_day':
        message.from_user.id = call.from_user.id
        current_weather(message)
    elif call.data == 'my_position':
        message.from_user.first_name = call.from_user.first_name
        message.from_user.id = call.from_user.id
        my_current_geoposition(message)


def help_location(message):
    """–°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –µ–≥–æ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ."""
    keyboard = types.ReplyKeyboardMarkup(
        row_width=1,
        resize_keyboard=True
    )
    button_geo = types.KeyboardButton(
        text="‚òÄÔ∏è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –∏ üë£ –º–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
        request_location=True
    )
    keyboard.add(button_geo)
    bot.send_message(
        message.chat.id,
        '–ø–æ—è–≤–∏–ª–∞—Å—å –∫–Ω–æ–ø–æ—á–∫–∞ –ø–æ–≥–æ–¥—ã –ø–æ –í–∞—à–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º',
        reply_markup=keyboard
    )
    message_id = message.message_id
    bot.delete_message(message.chat.id, int(message_id))
